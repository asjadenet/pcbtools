name: build(Ubuntu)
on:
  pull_request:
  release:
    types: [published]
  push:
    tags:
    branches:
      - main
      - develop

jobs:
  Test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

      # Recommendations:
      #   * support at least 2 operating systems
      #   * support at least 2 compilers
      #   * make sure all supported configurations for your project are built
      #
      # Disable/enable builds in this list to meet the above recommendations
      # and your own projects needs
      matrix:
        preset:
          - unixlike-gcc-debug
          - unixlike-gcc-release
          - unixlike-clang-debug
          - unixlike-clang-release

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Install latest CMake
        run: |
          # Remove any existing version of CMake
          sudo apt-get purge --auto-remove cmake
          # Download and install the latest version
          wget -O cmake.sh https://github.com/Kitware/CMake/releases/download/v3.29.0-rc4/cmake-3.29.0-rc4-linux-x86_64.sh
          sudo sh cmake.sh --skip-license --exclude-subdir --prefix=/usr/local
          # Update the PATH
          echo "/usr/local/bin" >> $GITHUB_PATH
          cmake --version

      # TODO: Add caching with presets
      # - name: Setup Cache
      #   uses: ./.github/actions/setup_cache
      #   with:
      #     compiler: ${{ matrix.compiler }}
      #     build_type: ${{ matrix.build_type }}
      #     packaging_maintainer_mode: ${{ matrix.packaging_maintainer_mode }}
      #     generator: ${{ matrix.generator }}

      - name: Get project name
        uses: cardinalby/export-env-action@v2
        with:
          envFile: ".github/constants.env"

      - name: Setup Cpp
        if: ${{ contains(matrix.preset, 'clang') }}
        uses: aminya/setup-cpp@v1
        with:
          compiler: llvm-19
          cmake: true
          ninja: true
          vcpkg: false
          cppcheck: true
          ccache: false
          clangtidy: 19
          gcovr: true

      - name: Setup Cpp
        if: ${{ contains(matrix.preset, 'gcc') }}
        uses: aminya/setup-cpp@v1
        with:
          compiler: gcc-11
          cmake: true
          ninja: true
          vcpkg: false
          cppcheck: true
          ccache: false
          clangtidy: true
          gcovr: true

      - name: Configure CMake
        run: |
          cmake --preset ${{matrix.preset}}

      - name: Build
        # Execute the build.
        run: |
          cmake --build --preset build-${{matrix.preset}}

      - name: Test
        if: ${{ !contains(matrix.preset, 'debug') }}
        run: |
          ctest --preset test-${{matrix.preset}}

      - name: Test & Coverage
        if: ${{ contains(matrix.preset, 'debug') && contains(matrix.preset, 'clang') }}
        run: |
          ctest --preset test-${{matrix.preset}}
          cd out/build/${{matrix.preset}}/
          gcovr -r ../../../ -f ../../../include -f ../../../src --xml-pretty --xml ../../../coverage.xml  --gcov-executable "llvm-cov gcov"

      - name: Test & Coverage
        if: ${{ contains(matrix.preset, 'debug') && contains(matrix.preset, 'gcc') }}
        run: |
          ctest --preset test-${{matrix.preset}}
          cd out/build/${{matrix.preset}}/
          gcovr -r ../../../ -f ../../../include -f ../../../src --xml-pretty --xml ../../../coverage.xml  --gcov-executable "gcov"

      - name: Publish to codecov
        uses: codecov/codecov-action@v4
        if: ${{ contains(matrix.preset, 'debug') }}
        with:
          flags: ${{ runner.os }}
          name: ${{ runner.os }}-coverage
          files: ${{ github.workspace }}/coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
